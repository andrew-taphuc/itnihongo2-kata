// Kata.js - Logic cho tr√≤ ch∆°i Kata

class KataGame {
  constructor() {
    this.words = [];
    this.currentWord = null;
    this.score = 0;
    this.totalQuestions = 0;
    this.questionCount = 0;
    this.maxQuestions = 10; // Gi·ªõi h·∫°n s·ªë c√¢u h·ªèi
    this.usedWords = new Set();
    this.hasAnsweredIncorrectly = false; // Theo d√µi n·∫øu ƒë√£ tr·∫£ l·ªùi sai

    // DOM elements
    this.definitionEl = document.getElementById("definition");
    this.inputEl = document.getElementById("japanese-input");
    this.submitBtn = document.getElementById("submit-btn");
    this.feedbackSection = document.getElementById("feedback-section");
    this.feedbackEl = document.getElementById("feedback");
    this.nextBtn = document.getElementById("next-btn");
    this.scoreEl = document.getElementById("score");
    this.totalEl = document.getElementById("total");
    this.accuracyEl = document.getElementById("accuracy");
    this.progressEl = document.getElementById("progress");

    this.init();
  }

  async init() {
    try {
      await this.loadWords();
      this.setupEventListeners();
      this.nextQuestion();
      this.updateUI();
    } catch (error) {
      console.error("L·ªói kh·ªüi t·∫°o game:", error);
      this.showError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ v·ª±ng!");
    }
  }

  async loadWords() {
    try {
      const data = await this.loadFromCSV();
      this.words = data;
      console.log(`ƒê√£ t·∫£i ${data.length} t·ª´ v·ª±ng t·ª´ CSV`);
    } catch (error) {
      console.error("L·ªói t·∫£i t·ª´ v·ª±ng:", error);
      // Fallback data n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c CSV
      this.words = [
        {
          id: 1,
          definition: "Risk assessment",
          japanese: "„É™„Çπ„ÇØ„Ç¢„Çª„Çπ„É°„É≥„Éà",
          romaji: "risuku asesumento",
        },
        {
          id: 2,
          definition: "Process",
          japanese: "„Éó„É≠„Çª„Çπ",
          romaji: "purosesu",
        },
        {
          id: 3,
          definition: "Computer",
          japanese: "„Ç≥„É≥„Éî„É•„Éº„Çø„Éº",
          romaji: "konpyuta",
        },
      ];
      console.log("S·ª≠ d·ª•ng d·ªØ li·ªáu fallback");
    }
  }

  async loadFromCSV() {
    const response = await fetch("kata_word.csv");
    if (!response.ok) {
      throw new Error("Kh√¥ng th·ªÉ t·∫£i file CSV");
    }

    const csvText = await response.text();
    return this.parseCSV(csvText);
  }

  parseCSV(csvText) {
    const lines = csvText.trim().split("\n");
    const words = [];

    // B·ªè qua header (d√≤ng ƒë·∫ßu ti√™n)
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;

      // Parse CSV line - x·ª≠ l√Ω quotes
      const cols = this.parseCSVLine(line);

      if (cols.length >= 2) {
        words.push({
          id: i,
          definition: cols[1].replace(/^"|"$/g, ""), // B·ªè quotes
          japanese: cols[2].replace(/^"|"$/g, ""), // B·ªè quotes
          romaji: this.generateRomaji(cols[1].replace(/^"|"$/g, "")),
        });
      }
    }

    return words;
  }

  parseCSVLine(line) {
    const result = [];
    let current = "";
    let inQuotes = false;

    for (let i = 0; i < line.length; i++) {
      const char = line[i];

      if (char === '"') {
        inQuotes = !inQuotes;
        current += char;
      } else if (char === "," && !inQuotes) {
        result.push(current.trim());
        current = "";
      } else {
        current += char;
      }
    }

    // Th√™m ph·∫ßn cu·ªëi
    if (current) {
      result.push(current.trim());
    }

    return result;
  }

  generateRomaji(japanese) {
    // Mapping c∆° b·∫£n katakana -> romaji (c√≥ th·ªÉ m·ªü r·ªông)
    const kataToRomaji = {
      „É™„Çπ„ÇØ: "risuku",
      „Ç¢„Çª„Çπ„É°„É≥„Éà: "asesumento",
      „Éó„É≠„Çª„Çπ: "purosesu",
      „É¨„Éô„É´: "reberu",
      „Éï„Ç°„Ç§„Éä„É≥„Ç∑„É≥„Ç∞: "fainanshingu",
      „Ç≥„É≥„Éà„É≠„Éº„É´: "kontororu",
      „Éû„Éç„Ç∏„É°„É≥„Éà: "manejimento",
      „Ç∑„Çπ„ÉÜ„É†: "shisutemu",
      „Çª„Ç≠„É•„É™„ÉÜ„Ç£: "sekyuriti",
      „Éê„Ç§: "bai",
      „Éá„Ç∂„Ç§„É≥: "dezain",
      „Ç≥„É≥„Éî„É•„Éº„Çø„Éº: "konpyuta",
      „Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà: "intanetto",
      „ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢: "sofutowea",
      „Éá„Éº„Çø„Éô„Éº„Çπ: "detabesu",
      „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: "nettowaku",
      „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥: "apurikeshon",
      „Çµ„Éº„Éê„Éº: "saba",
      „Ç¢„Ç§„Ç®„Çπ„Ç®„É†„Ç®„Çπ: "ai esu emu esu",
    };

    // T√¨m romaji t∆∞∆°ng ·ª©ng ho·∫∑c tr·∫£ v·ªÅ chu·ªói g·ªëc
    for (const [kata, romaji] of Object.entries(kataToRomaji)) {
      if (japanese.includes(kata)) {
        return japanese.replace(kata, romaji);
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o romaji ƒë∆°n gi·∫£n
    return japanese.toLowerCase().replace(/[^\w\s]/g, "");
  }

  setupEventListeners() {
    // Submit button
    this.submitBtn.addEventListener("click", () => this.checkAnswer());

    // Enter key ƒë·ªÉ submit
    this.inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        this.checkAnswer();
      }
    });

    // Next button
    this.nextBtn.addEventListener("click", () => this.nextQuestion());

    // Ph√≠m t·∫Øt
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        this.goBack();
      } else if (
        e.key === " " &&
        this.feedbackSection.style.display !== "none"
      ) {
        e.preventDefault();
        this.nextQuestion();
      }
    });

    // Auto-focus input
    this.inputEl.focus();

    // X·ª≠ l√Ω paste
    this.inputEl.addEventListener("paste", (e) => {
      // Cho ph√©p paste text ti·∫øng Nh·∫≠t
      setTimeout(() => {
        console.log("ƒê√£ paste:", this.inputEl.value);
      }, 10);
    });
  }

  getRandomWord() {
    // L·∫•y t·ª´ ng·∫´u nhi√™n ch∆∞a s·ª≠ d·ª•ng
    const availableWords = this.words.filter(
      (word) => !this.usedWords.has(word.id)
    );

    if (availableWords.length === 0) {
      // Reset n·∫øu ƒë√£ h·∫øt t·ª´
      this.usedWords.clear();
      return this.words[Math.floor(Math.random() * this.words.length)];
    }

    return availableWords[Math.floor(Math.random() * availableWords.length)];
  }

  nextQuestion() {
    if (this.questionCount >= this.maxQuestions) {
      this.showFinalResult();
      return;
    }

    this.currentWord = this.getRandomWord();
    this.usedWords.add(this.currentWord.id);
    this.questionCount++;
    this.hasAnsweredIncorrectly = false; // Reset tr·∫°ng th√°i cho c√¢u m·ªõi

    // C·∫≠p nh·∫≠t UI
    this.definitionEl.textContent = this.currentWord.definition;
    this.inputEl.value = "";
    this.inputEl.disabled = false;
    this.submitBtn.disabled = false;
    this.feedbackSection.style.display = "none";

    // Focus input
    this.inputEl.focus();

    // Hi·ªáu ·ª©ng fade in
    this.definitionEl.style.opacity = "0";
    setTimeout(() => {
      this.definitionEl.style.transition = "opacity 0.3s ease";
      this.definitionEl.style.opacity = "1";
    }, 10);

    this.updateProgress();
    console.log("C√¢u h·ªèi:", this.currentWord);
  }

  checkAnswer() {
    const userAnswer = this.inputEl.value.trim();
    const correctAnswer = this.currentWord.japanese;

    if (!userAnswer) {
      this.showMessage("Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi!", "warning");
      return;
    }

    const isCorrect = this.compareAnswers(userAnswer, correctAnswer);

    if (!this.hasAnsweredIncorrectly) {
      // L·∫ßn ƒë·∫ßu tr·∫£ l·ªùi
      this.totalQuestions++;

      if (isCorrect) {
        this.score++;
        this.showFeedback(
          true,
          `Ch√≠nh x√°c! Ê≠£Ëß£ÔºÅ (${this.currentWord.romaji})`
        );
      } else {
        this.hasAnsweredIncorrectly = true;
        this.showFeedback(
          false,
          `Sai r·ªìi! ÈñìÈÅï„ÅÑÔºÅ<br>ƒê√°p √°n ƒë√∫ng: <strong>${correctAnswer}</strong><br>Romaji: ${this.currentWord.romaji}<br><br>üí° <em>H√£y nh·∫≠p l·∫°i ƒë√°p √°n ƒë√∫ng ƒë·ªÉ ti·∫øp t·ª•c</em>`
        );
        // X√≥a input ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
        this.inputEl.value = "";
        this.inputEl.focus();
        this.updateUI();
        return;
      }
    } else {
      // ƒê√£ tr·∫£ l·ªùi sai tr∆∞·ªõc ƒë√≥, ki·ªÉm tra xem nh·∫≠p ƒë√∫ng ch∆∞a
      if (isCorrect) {
        this.showFeedback(true, `Ch√≠nh x√°c! B√¢y gi·ªù c√≥ th·ªÉ ti·∫øp t·ª•c!`);
      } else {
        this.showMessage("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë√°p √°n ƒë·ªÉ ti·∫øp t·ª•c!", "warning");
        this.inputEl.value = "";
        this.inputEl.focus();
        return;
      }
    }

    // Disable input
    this.inputEl.disabled = true;
    this.submitBtn.disabled = true;

    this.updateUI();

    // Log k·∫øt qu·∫£
    console.log(
      `C√¢u tr·∫£ l·ªùi: ${userAnswer} | ƒê√°p √°n: ${correctAnswer} | ${
        isCorrect ? "ƒê√∫ng" : "Sai"
      }`
    );
  }

  compareAnswers(userAnswer, correctAnswer) {
    // Chu·∫©n h√≥a chu·ªói ƒë·ªÉ so s√°nh
    const normalize = (str) =>
      str
        .trim()
        .toLowerCase()
        .replace(/\s+/g, "")
        .replace(/[„Éª„Éª]/g, "")
        .replace(/[„ÉºÔºç]/g, "");

    const normalizedUser = normalize(userAnswer);
    const normalizedCorrect = normalize(correctAnswer);

    // So s√°nh ch√≠nh x√°c
    if (normalizedUser === normalizedCorrect) {
      return true;
    }

    // Ki·ªÉm tra n·∫øu c√≥ nhi·ªÅu ƒë√°p √°n (ph√¢n t√°ch b·∫±ng /, Ôºè)
    const alternatives = correctAnswer
      .split(/[\/Ôºè]/)
      .map((alt) => normalize(alt.trim()));
    return alternatives.some((alt) => alt === normalizedUser);
  }

  showFeedback(isCorrect, message) {
    this.feedbackEl.innerHTML = message;
    this.feedbackEl.className = `feedback ${
      isCorrect ? "correct" : "incorrect"
    }`;
    this.feedbackSection.style.display = "block";

    // Hi·ªáu ·ª©ng
    this.feedbackSection.style.opacity = "0";
    this.feedbackSection.style.transform = "translateY(20px)";
    setTimeout(() => {
      this.feedbackSection.style.transition = "all 0.3s ease";
      this.feedbackSection.style.opacity = "1";
      this.feedbackSection.style.transform = "translateY(0)";
    }, 10);

    // Auto next sau 3 gi√¢y n·∫øu ƒë√∫ng
    if (isCorrect) {
      setTimeout(() => {
        if (this.feedbackSection.style.display !== "none") {
          this.nextQuestion();
        }
      }, 2000);
    }
  }

  updateUI() {
    this.scoreEl.textContent = this.score;
    this.totalEl.textContent = this.totalQuestions;

    const accuracy =
      this.totalQuestions > 0
        ? ((this.score / this.totalQuestions) * 100).toFixed(1)
        : 0;
    this.accuracyEl.textContent = `${accuracy}%`;
  }

  updateProgress() {
    const progress = (this.questionCount / this.maxQuestions) * 100;
    this.progressEl.style.width = `${progress}%`;
  }

  showFinalResult() {
    const accuracy =
      this.totalQuestions > 0
        ? ((this.score / this.totalQuestions) * 100).toFixed(1)
        : 0;

    // C·∫≠p nh·∫≠t modal k·∫øt qu·∫£
    document.getElementById("final-score").textContent = this.score;
    document.getElementById("final-total").textContent = this.totalQuestions;
    document.getElementById("final-accuracy").textContent = `${accuracy}%`;

    // Hi·ªÉn th·ªã modal
    const modal = document.getElementById("result-modal");
    modal.style.display = "block";

    // Hi·ªáu ·ª©ng
    modal.style.opacity = "0";
    setTimeout(() => {
      modal.style.transition = "opacity 0.3s ease";
      modal.style.opacity = "1";
    }, 10);

    // L∆∞u k·∫øt qu·∫£ v√†o localStorage
    this.saveResult(accuracy);

    console.log(
      `K·∫øt th√∫c game: ${this.score}/${this.totalQuestions} (${accuracy}%)`
    );
  }

  saveResult(accuracy) {
    try {
      const results = JSON.parse(localStorage.getItem("kataResults") || "[]");
      results.push({
        score: this.score,
        total: this.totalQuestions,
        accuracy: parseFloat(accuracy),
        date: new Date().toISOString(),
        timestamp: Date.now(),
      });

      // Ch·ªâ l∆∞u 10 k·∫øt qu·∫£ g·∫ßn nh·∫•t
      if (results.length > 10) {
        results.splice(0, results.length - 10);
      }

      localStorage.setItem("kataResults", JSON.stringify(results));
    } catch (error) {
      console.error("L·ªói l∆∞u k·∫øt qu·∫£:", error);
    }
  }

  showMessage(message, type = "info") {
    // T·∫°o toast message
    const toast = document.createElement("div");
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === "warning" ? "#f56565" : "#4299e1"};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;

    document.body.appendChild(toast);

    // Slide in
    setTimeout(() => {
      toast.style.transform = "translateX(0)";
    }, 10);

    // Remove sau 3 gi√¢y
    setTimeout(() => {
      toast.style.transform = "translateX(100%)";
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 300);
    }, 3000);
  }

  showError(message) {
    this.definitionEl.innerHTML = `
            <div style="color: #e53e3e; text-align: center;">
                <h3>‚ùå L·ªói</h3>
                <p>${message}</p>
                <button onclick="location.reload()" style="margin-top: 10px; padding: 8px 16px; background: #4299e1; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Th·ª≠ l·∫°i
                </button>
            </div>
        `;
  }
}

// Global functions
function goBack() {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën quay l·∫°i menu ch√≠nh? Ti·∫øn tr√¨nh s·∫Ω b·ªã m·∫•t!")) {
    window.location.href = "index.html";
  }
}

function restartGame() {
  location.reload();
}

function clearInput() {
  const input = document.getElementById("japanese-input");
  input.value = "";
  input.focus();
}

function skipQuestion() {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën b·ªè qua c√¢u n√†y?")) {
    game.totalQuestions++;
    game.updateUI();
    game.nextQuestion();
  }
}

// Kh·ªüi t·∫°o game khi DOM loaded
let game;
document.addEventListener("DOMContentLoaded", function () {
  console.log("üéÆ Kh·ªüi t·∫°o Kata Game...");
  game = new KataGame();

  // Hi·ªáu ·ª©ng loading
  const container = document.querySelector(".container");
  container.style.opacity = "0";
  container.style.transform = "translateY(20px)";

  setTimeout(() => {
    container.style.transition = "all 0.5s ease";
    container.style.opacity = "1";
    container.style.transform = "translateY(0)";
  }, 100);
});

// NgƒÉn ch·∫∑n accidental page refresh
window.addEventListener("beforeunload", function (e) {
  if (game && game.totalQuestions > 0) {
    e.preventDefault();
    e.returnValue = "B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi trang? Ti·∫øn tr√¨nh s·∫Ω b·ªã m·∫•t!";
  }
});

// Export cho testing
if (typeof module !== "undefined" && module.exports) {
  module.exports = { KataGame };
}
